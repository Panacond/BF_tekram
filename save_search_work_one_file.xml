<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="1" failures="1" skipped="0" tests="1" time="12.238" timestamp="2022-04-06T10:39:49.800893" hostname="akakiy-GL72-6QD"><testcase classname="test.save_search_work_one_file.SaveSearchDataTest" name="test_group" time="11.407"><failure message="selenium.common.exceptions.WebDriverException: Message: chrome not reachable&#10;  (Session info: chrome=100.0.4896.60)&#10;Stacktrace:&#10;#0 0x557c1dfa2c93 &lt;unknown&gt;&#10;#1 0x557c1dd0269f &lt;unknown&gt;&#10;#2 0x557c1dcf0c04 &lt;unknown&gt;&#10;#3 0x557c1dcf1619 &lt;unknown&gt;&#10;#4 0x557c1dcf3372 &lt;unknown&gt;&#10;#5 0x557c1dceb796 &lt;unknown&gt;&#10;#6 0x557c1dd03c02 &lt;unknown&gt;&#10;#7 0x557c1dd68ae1 &lt;unknown&gt;&#10;#8 0x557c1dd561a3 &lt;unknown&gt;&#10;#9 0x557c1dd2bd2a &lt;unknown&gt;&#10;#10 0x557c1dd2cdf5 &lt;unknown&gt;&#10;#11 0x557c1dfd122d &lt;unknown&gt;&#10;#12 0x557c1dfea025 &lt;unknown&gt;&#10;#13 0x557c1dfd2f85 &lt;unknown&gt;&#10;#14 0x557c1dfea8f5 &lt;unknown&gt;&#10;#15 0x557c1dfc6e00 &lt;unknown&gt;&#10;#16 0x557c1e005bd8 &lt;unknown&gt;&#10;#17 0x557c1e005d5c &lt;unknown&gt;&#10;#18 0x557c1e01f38d &lt;unknown&gt;&#10;#19 0x7fbe80438609 &lt;unknown&gt;">self = &lt;test.save_search_work_one_file.SaveSearchDataTest testMethod=test_group&gt;

    def test_group(self):
        home_page = self.getHomePage()
        home_page.implicitly_wait(self.DEFAULT_TIMEOUT)
        home_page.input_email(description="1")
        home_page.input_password(description="2")
        home_page.click_button_come_in(description="3")
        home_page.input_search(text="group paint", description="4")
        group_page = self.getGroupPage()
        list_group = group_page.get_list_group(description="5")
        set_element = list_group[1]
        group_page.set_id_group(set_element)
&gt;       group_page.one_group_click(description="6")

test/save_search_work_one_file.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page/BasePage.py:12: in wrapper
    self.make_screenshot(kwargs['description'])
page/BasePage.py:45: in make_screenshot
    self.driver.save_screenshot(now_time)
/home/akakiy/enviroment/testing/venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:1346: in save_screenshot
    return self.get_screenshot_as_file(filename)
/home/akakiy/enviroment/testing/venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:1321: in get_screenshot_as_file
    png = self.get_screenshot_as_png()
/home/akakiy/enviroment/testing/venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:1357: in get_screenshot_as_png
    return b64decode(self.get_screenshot_as_base64().encode('ascii'))
/home/akakiy/enviroment/testing/venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:1369: in get_screenshot_as_base64
    return self.execute(Command.SCREENSHOT)['value']
/home/akakiy/enviroment/testing/venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f76e7c0fa30&gt;
response = {'status': 500, 'value': '{"value":{"error":"chrome not reachable","message":"chrome not reachable\\n  (Session info: ...\\n#17 0x557c1e005d5c \\u003Cunknown&gt;\\n#18 0x557c1e01f38d \\u003Cunknown&gt;\\n#19 0x7fbe80438609 \\u003Cunknown&gt;\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: chrome not reachable
E         (Session info: chrome=100.0.4896.60)
E       Stacktrace:
E       #0 0x557c1dfa2c93 &lt;unknown&gt;
E       #1 0x557c1dd0269f &lt;unknown&gt;
E       #2 0x557c1dcf0c04 &lt;unknown&gt;
E       #3 0x557c1dcf1619 &lt;unknown&gt;
E       #4 0x557c1dcf3372 &lt;unknown&gt;
E       #5 0x557c1dceb796 &lt;unknown&gt;
E       #6 0x557c1dd03c02 &lt;unknown&gt;
E       #7 0x557c1dd68ae1 &lt;unknown&gt;
E       #8 0x557c1dd561a3 &lt;unknown&gt;
E       #9 0x557c1dd2bd2a &lt;unknown&gt;
E       #10 0x557c1dd2cdf5 &lt;unknown&gt;
E       #11 0x557c1dfd122d &lt;unknown&gt;
E       #12 0x557c1dfea025 &lt;unknown&gt;
E       #13 0x557c1dfd2f85 &lt;unknown&gt;
E       #14 0x557c1dfea8f5 &lt;unknown&gt;
E       #15 0x557c1dfc6e00 &lt;unknown&gt;
E       #16 0x557c1e005bd8 &lt;unknown&gt;
E       #17 0x557c1e005d5c &lt;unknown&gt;
E       #18 0x557c1e01f38d &lt;unknown&gt;
E       #19 0x7fbe80438609 &lt;unknown&gt;

/home/akakiy/enviroment/testing/venv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException</failure></testcase><testcase classname="test.save_search_work_one_file.SaveSearchDataTest" name="test_group" time="0.001"><error message="failed on teardown with &quot;selenium.common.exceptions.WebDriverException: Message: chrome not reachable&#10;  (Session info: chrome=100.0.4896.60)&#10;Stacktrace:&#10;#0 0x557c1dfa2c93 &lt;unknown&gt;&#10;#1 0x557c1dd0269f &lt;unknown&gt;&#10;#2 0x557c1dcf0c04 &lt;unknown&gt;&#10;#3 0x557c1dce24ed &lt;unknown&gt;&#10;#4 0x557c1dd5dcab &lt;unknown&gt;&#10;#5 0x557c1dd56278 &lt;unknown&gt;&#10;#6 0x557c1dd2bd2a &lt;unknown&gt;&#10;#7 0x557c1dd2cdf5 &lt;unknown&gt;&#10;#8 0x557c1dfd122d &lt;unknown&gt;&#10;#9 0x557c1dfea025 &lt;unknown&gt;&#10;#10 0x557c1dfd2f85 &lt;unknown&gt;&#10;#11 0x557c1dfea8f5 &lt;unknown&gt;&#10;#12 0x557c1dfc6e00 &lt;unknown&gt;&#10;#13 0x557c1e005bd8 &lt;unknown&gt;&#10;#14 0x557c1e005d5c &lt;unknown&gt;&#10;#15 0x557c1e01f38d &lt;unknown&gt;&#10;#16 0x7fbe80438609 &lt;unknown&gt;&quot;">test/base_test.py:37: in tearDown
    self.driver.close()
/home/akakiy/enviroment/testing/venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:938: in close
    self.execute(Command.CLOSE)
/home/akakiy/enviroment/testing/venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f76e7c0fa30&gt;
response = {'status': 500, 'value': '{"value":{"error":"chrome not reachable","message":"chrome not reachable\\n  (Session info: ...\\n#14 0x557c1e005d5c \\u003Cunknown&gt;\\n#15 0x557c1e01f38d \\u003Cunknown&gt;\\n#16 0x7fbe80438609 \\u003Cunknown&gt;\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: chrome not reachable
E         (Session info: chrome=100.0.4896.60)
E       Stacktrace:
E       #0 0x557c1dfa2c93 &lt;unknown&gt;
E       #1 0x557c1dd0269f &lt;unknown&gt;
E       #2 0x557c1dcf0c04 &lt;unknown&gt;
E       #3 0x557c1dce24ed &lt;unknown&gt;
E       #4 0x557c1dd5dcab &lt;unknown&gt;
E       #5 0x557c1dd56278 &lt;unknown&gt;
E       #6 0x557c1dd2bd2a &lt;unknown&gt;
E       #7 0x557c1dd2cdf5 &lt;unknown&gt;
E       #8 0x557c1dfd122d &lt;unknown&gt;
E       #9 0x557c1dfea025 &lt;unknown&gt;
E       #10 0x557c1dfd2f85 &lt;unknown&gt;
E       #11 0x557c1dfea8f5 &lt;unknown&gt;
E       #12 0x557c1dfc6e00 &lt;unknown&gt;
E       #13 0x557c1e005bd8 &lt;unknown&gt;
E       #14 0x557c1e005d5c &lt;unknown&gt;
E       #15 0x557c1e01f38d &lt;unknown&gt;
E       #16 0x7fbe80438609 &lt;unknown&gt;

/home/akakiy/enviroment/testing/venv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException</error></testcase></testsuite></testsuites>